1 .mysql> create table Student(Roll_no int primary key,Name varchar(20),Branch varchar(20));
mysql> insert into Student(Roll_no,Name,Branch)(1,'Jay','Comp Science'),(2,'Suhani','Electronic & Com'),(3,'Kriti','Electronic & Com');
mysql> insert into Student(Roll_no,Name,Branch)VALUES(1,'Jay','Comp Science'),(2,'Suhani','Electronic & Com'),(3,'Kriti','Electronic & Com');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> Describe Student;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| Roll_no | int         | NO   | PRI | NULL    |       |
| Name    | varchar(20) | YES  |     | NULL    |       |
| Branch  | varchar(20) | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
3 rows in set (0.02 sec)

mysql> select * from student;
+---------+--------+------------------+
| Roll_no | Name   | Branch           |
+---------+--------+------------------+
|       1 | Jay    | Comp Science     |
|       2 | Suhani | Electronic & Com |
|       3 | Kriti  | Electronic & Com |
+---------+--------+------------------+
3 rows in set (0.00 sec)



mysql> create table Exam(Roll_no int, foreign key(Roll_no) references Student(Roll_no),S_code varchar(20),Marks int,P_code varchar(20));
Query OK, 0 rows affected (0.03 sec)

mysql> insert into Exam(Roll_no,S_code,Marks,P_code)VALUES(1,'CS11',50,'CS'),(1,'CS12',60,'CS'),(2,'EC101',66,'EC'),(2,'EC1012',70,'EC'),(3,'EC101',45,'EC')
,(3,'EC102',50,'EC');
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select * from Exam;
+---------+--------+-------+--------+
| Roll_no | S_code | Marks | P_code |
+---------+--------+-------+--------+
|       1 | CS11   |    50 | CS     |
|       1 | CS12   |    60 | CS     |
|       2 | EC101  |    66 | EC     |
|       2 | EC1012 |    70 | EC     |
|       3 | EC101  |    45 | EC     |
|       3 | EC102  |    50 | EC     |
+---------+--------+-------+--------+
6 rows in set (0.00 sec)


2.Create table given below: Employee and IncentiveTable.

 create table Employee(Emp_id int primary key,First_name varchar(20),Last_name varchar(20),Salary int,Joining_date datetime,Department varchar(30));
Query OK, 0 rows affected (0.03 sec)

mysql> insert into Employee(Emp_id,First_name,Last_name,Salary,Joining_date,Department)VALUES(1,'Jhon','Abraham',1000000,'2013-01-01 12:00.00','Banking'),(2,'Miachel','clarke',8000000,'2013-01-01 12:00.00','Insurance'),
    -> (3,'Roy','Thomas',700000,'2013-02-01 12:00.00','Banking'),(4,'Tom','Jose',600000,'2013-01-01 12:00.00','Insurance'),(5,'Jerry','Pinto',6500000,'2013-
02-01 12:00.00','Insurance'),(6,'Philip','Mathew',7500000,'2013-01-01 12:00.00','Service'),(7,'TestName1','123',6500000,'2013-01-01 12:00.00','Service'),(8,'lastname2','lname%',600000,'2013-02-01 12:00.00','Insurance');
Query OK, 8 rows affected, 8 warnings (0.01 sec)
Records: 8  Duplicates: 0  Warnings: 8

mysql> select * from;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
mysql> select * from employee;
+--------+------------+-----------+---------+---------------------+------------+
| Emp_id | First_name | Last_name | Salary  | Joining_date        | Department |
+--------+------------+-----------+---------+---------------------+------------+
|      1 | Jhon       | Abraham   | 1000000 | 2013-01-01 12:00:00 | Banking    |
|      2 | Miachel    | clarke    | 8000000 | 2013-01-01 12:00:00 | Insurance  |
|      3 | Roy        | Thomas    |  700000 | 2013-02-01 12:00:00 | Banking    |
|      4 | Tom        | Jose      |  600000 | 2013-01-01 12:00:00 | Insurance  |
|      5 | Jerry      | Pinto     | 6500000 | 2013-02-01 12:00:00 | Insurance  |
|      6 | Philip     | Mathew    | 7500000 | 2013-01-01 12:00:00 | Service    |
|      7 | TestName1  | 123       | 6500000 | 2013-01-01 12:00:00 | Service    |
|      8 | lastname2  | lname%    |  600000 | 2013-02-01 12:00:00 | Insurance  |
+--------+------------+-----------+---------+---------------------+------------+
8 rows in set (0.00 sec)


 create Table Incentive(Emp_ref_id int,Foreign key(Emp_ref_id) references Employee(Emp_id),Incentive_date date,Incentive_amount int);
Query OK, 0 rows affected (0.04 sec)
mysql> describe incentive;
+------------------+------+------+-----+---------+-------+
| Field            | Type | Null | Key | Default | Extra |
+------------------+------+------+-----+---------+-------+
| Emp_ref_id       | int  | YES  | MUL | NULL    |       |
| Incentive_date   | date | YES  |     | NULL    |       |
| Incentive_amount | int  | YES  |     | NULL    |       |
+------------------+------+------+-----+---------+-------+
3 rows in set (0.00 sec)
insert into Incentive values(1,'2013-02-01','5000'),(2,'2013-02-01','3000'),(3,'2013-02-01','4000'),(1,'2013-01-01','4500'),(2,'2013-01-01','3500');
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0
mysql> select *from incentive;
+------------+----------------+------------------+
| Emp_ref_id | Incentive_date | Incentive_amount |
+------------+----------------+------------------+
|          1 | 2013-02-01     |             5000 |
|          2 | 2013-02-01     |             3000 |
|          3 | 2013-02-01     |             4000 |
|          1 | 2013-01-01     |             4500 |
|          2 | 2013-01-01     |             3500 |
+------------+----------------+------------------+
5 rows in set (0.00 sec) 


3. Get First_Name from employee table using Tom name “Employee Name”.

->mysql> select first_name as Employee_name from Employee where first_name="Tom";
+---------------+
| Employee_name |
+---------------+
| Tom           |
+---------------+



4. Get FIRST_NAME, Joining Date, and Salary from employee table.

->mysql> select First_name,Joining_date,Salary from employee;
+------------+---------------------+---------+
| First_name | Joining_date        | Salary  |
+------------+---------------------+---------+
| John       | 2013-01-01 12:00:00 | 1000000 |
| Michael    | 2013-01-01 12:00:00 |  800000 |
| Roy        | 2013-02-01 12:00:00 |  700000 |
| Tom        | 2013-02-01 12:00:00 |  600000 |
| Jerry      | 2013-02-01 12:00:00 |  650000 |
| Philip     | 2013-01-01 12:00:00 |  750000 |
| Testname1  | 2013-01-01 12:00:00 |  650000 |
| Testname2  | 2013-02-01 12:00:00 |  600000 |
+------------+---------------------+---------+


5 Get all employee details from the employee table order by First_Name ascendind and salary descending.

->mysql> select * from employee order by first_name ASC;
+-------------+------------+-----------+---------+---------------------+------------+
| Employee_id | First_name | Last_name | Salary  | Joining_date        | Department |
+-------------+------------+-----------+---------+---------------------+------------+
|           5 | Jerry      | Pinto     |  650000 | 2013-02-01 12:00:00 | Insurance  |
|           1 | John       | Abraham   | 1000000 | 2013-01-01 12:00:00 | Banking    |
|           2 | Michael    | Clarke    |  800000 | 2013-01-01 12:00:00 | Insurance  |
|           6 | Philip     | Mathew    |  750000 | 2013-01-01 12:00:00 | Service    |
|           3 | Roy        | Thomas    |  700000 | 2013-02-01 12:00:00 | Banking    |
|           7 | Testname1  | 123       |  650000 | 2013-01-01 12:00:00 | Service    |
|           8 | Testname2  | Lname%    |  600000 | 2013-02-01 12:00:00 | Insurance  |
|           4 | Tom        | Jose      |  600000 | 2013-02-01 12:00:00 | Insurance  |
+-------------+------------+-----------+---------+---------------------+------------+

->mysql> select * from employee order by salary DESC;
+-------------+------------+-----------+---------+---------------------+------------+
| Employee_id | First_name | Last_name | Salary  | Joining_date        | Department |
+-------------+------------+-----------+---------+---------------------+------------+
|           1 | John       | Abraham   | 1000000 | 2013-01-01 12:00:00 | Banking    |
|           2 | Michael    | Clarke    |  800000 | 2013-01-01 12:00:00 | Insurance  |
|           6 | Philip     | Mathew    |  750000 | 2013-01-01 12:00:00 | Service    |
|           3 | Roy        | Thomas    |  700000 | 2013-02-01 12:00:00 | Banking    |
|           5 | Jerry      | Pinto     |  650000 | 2013-02-01 12:00:00 | Insurance  |
|           7 | Testname1  | 123       |  650000 | 2013-01-01 12:00:00 | Service    |
|           4 | Tom        | Jose      |  600000 | 2013-02-01 12:00:00 | Insurance  |
|           8 | Testname2  | Lname%    |  600000 | 2013-02-01 12:00:00 | Insurance  |
+-------------+------------+-----------+---------+---------------------+------------+


6. Get employee details from employee table whose first name contains ‘J’.

->mysql> select * from employee where first_name like 'J%';
+-------------+------------+-----------+---------+---------------------+------------+
| Employee_id | First_name | Last_name | Salary  | Joining_date        | Department |
+-------------+------------+-----------+---------+---------------------+------------+
|           1 | John       | Abraham   | 1000000 | 2013-01-01 12:00:00 | Banking    |
|           5 | Jerry      | Pinto     |  650000 | 2013-02-01 12:00:00 | Insurance  |
+-------------+------------+-----------+---------+---------------------+------------+


7.Get department wise maximum salary from employee table order by
->mysql> select Department, MAX(Salary) as Max_Salary from employee group by Department order by Department;
+------------+------------+
| Department | Max_Salary |
+------------+------------+
| Banking    |    1000000 |
| Insurance  |     800000 |
| Service    |     750000 |
+------------+------------+

8 salaryascending?

->mysql> select * from employee order by salary ASC;
+-------------+------------+-----------+---------+---------------------+------------+
| Employee_id | First_name | Last_name | Salary  | Joining_date        | Department |
+-------------+------------+-----------+---------+---------------------+------------+
|           4 | Tom        | Jose      |  600000 | 2013-02-01 12:00:00 | Insurance  |
|           8 | Testname2  | Lname%    |  600000 | 2013-02-01 12:00:00 | Insurance  |
|           5 | Jerry      | Pinto     |  650000 | 2013-02-01 12:00:00 | Insurance  |
|           7 | Testname1  | 123       |  650000 | 2013-01-01 12:00:00 | Service    |
|           3 | Roy        | Thomas    |  700000 | 2013-02-01 12:00:00 | Banking    |
|           6 | Philip     | Mathew    |  750000 | 2013-01-01 12:00:00 | Service    |
|           2 | Michael    | Clarke    |  800000 | 2013-01-01 12:00:00 | Insurance  |
|           1 | John       | Abraham   | 1000000 | 2013-01-01 12:00:00 | Banking    |
+-------------+------------+-----------+---------+---------------------+------------+

9. Select first_name, incentive amount from employee and incentives table

for those employees who have incentives and incentive amount greater than
3000
->mysql> select e.First_Name, i.Incentive_amount from employee e join incentive i on e.Employee_ID = i.Employee_ref_id where i.Incentive_amount > 3000;
+------------+------------------+
| First_Name | Incentive_amount |
+------------+------------------+
| John       |             5000 |
| Roy        |             4000 |
| John       |             4500 |
| Michael    |             3500 |
+------------+------------------+

10. Create After Insert trigger on Employee table which insert records in viewtable

->mysql> create table viewtable(Employee_id int primary key,First_name varchar(10),Last_name varchar(10),Salary int,Joining_date datetime,Department varchar(20));
->mysql> describe viewtable;
+--------------+-------------+------+-----+---------+-------+
| Field        | Type        | Null | Key | Default | Extra |
+--------------+-------------+------+-----+---------+-------+
| Employee_id  | int         | NO   | PRI | NULL    |       |
| First_name   | varchar(10) | YES  |     | NULL    |       |
| Last_name    | varchar(10) | YES  |     | NULL    |       |
| Salary       | int         | YES  |     | NULL    |       |
| Joining_date | datetime    | YES  |     | NULL    |       |
| Department   | varchar(20) | YES  |     | NULL    |       |
+--------------+-------------+------+-----+---------+-------+
->delimiter //
create trigger emp_trigger
after
insert on employee
for each row
begin
	insert into viewtable(Employee_id,First_name,Last_name,Salary,Joining_date,Department)
    	values(new.Employee_id,new.First_name,new.Last_name,new.Salary,new.Joining_date,new.Department);
end //

->mysql> insert into employee values(1,'Muaaz','Kazi',10000000,'2024-03-27 12:00:00','Python');
->mysql> select * from viewtable;
+-------------+------------+-----------+----------+---------------------+------------+
| Employee_id | First_name | Last_name | Salary   | Joining_date        | Department |
+-------------+------------+-----------+----------+---------------------+------------+
|          11 | Muaaz      | kazi      | 10000000 | 2024-03-27 12:00:00 | python     |
+-------------+------------+-----------+----------+---------------------+------------+


11. Create table given below: Salesperson and Customer

->Create Table Salesperson:-
->mysql> create table Salesperson(SNo int primary key,SNAME varchar(20),CITY varchar(50),COMM int);

->mysql> describe salesperson;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| SNo   | int         | NO   | PRI | NULL    |       |
| SNAME | varchar(20) | YES  |     | NULL    |       |
| CITY  | varchar(50) | YES  |     | NULL    |       |
| COMM  | float       | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

->mysql>insert into salesperson values(1001, 'Peel', 'London', .12),(1002, 'Serres', 'San Jose', .13),(1004, 'Motika', 'London', .11),(1007, 'Rafkin', 'Barcelona', .15),(1003, 'Axelrod', 'New York', .1);

->mysql> select * from salesperson;
+------+---------+-----------+------+
| SNo  | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1003 | Axelrod | New York  |  0.1 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rafkin  | Barcelona | 0.15 |
+------+---------+-----------+------+

->Create Customer Table:-
->mysql> create table Customer(CNM int primary key,CNAME varchar(20),CITY varchar(20),RATING int,SNo int,foreign key(SNo) references Salesperson(SNo));
->mysql> describe customer;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| CNM    | int         | NO   | PRI | NULL    |       |
| CNAME  | varchar(20) | YES  |     | NULL    |       |
| CITY   | varchar(20) | YES  |     | NULL    |       |
| RATING | int         | YES  |     | NULL    |       |
| SNo    | int         | YES  | MUL | NULL    |       |
+--------+-------------+------+-----+---------+-------+

->mysql>insert into customer values(201,"Hoffman","London",100,1001),(202,"Giovanne","Roe",200,1003),(203,"Liu","San Jose",300,1002),(204,"Grass","Barcelona",100,1002),(206,"Clemens","London",300,1007),(207,"Pereira","Roe",100,1004);

->mysql> select * from customer;
+-----+----------+-----------+--------+------+
| CNM | CNAME    | CITY      | RATING | SNo  |
+-----+----------+-----------+--------+------+
| 201 | Hoffman  | London    |    100 | 1001 |
| 202 | Giovanne | Roe       |    200 | 1003 |
| 203 | Liu      | San Jose  |    300 | 1002 |
| 204 | Grass    | Barcelona |    100 | 1002 |
| 206 | Clemens  | London    |    300 | 1007 |
| 207 | Pereira  | Roe       |    100 | 1004 |
+-----+----------+-----------+--------+------+

12. Retrieve the below data from above table:-

13. All Customer name whose rating is more than 100.

->mysql> select CNAME,RATING from customer where rating > 100;
+----------+--------+
| CNAME    | RATING |
+----------+--------+
| Giovanne |    200 |
| Liu      |    300 |
| Clemens  |    300 |
+----------+--------+


14. Names and cities of all salespeople in London with commission above 0.12

->mysql> select SNAME,CITY from salesperson where city='london' and comm>0.12;
Empty set (0.00 sec)


15. All salespeople either in Barcelona or in London

->mysql> select * from salesperson where city in ('barcelona','london');
+------+--------+-----------+------+
| SNo  | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    | 0.12 |
| 1004 | Motika | London    | 0.11 |
| 1007 | Rafkin | Barcelona | 0.15 |
+------+--------+-----------+------+

16. All salespeople with commission between 0.10 and 0.12. (Boundary valuesshould be excluded).

->mysql> select *from salesperson where comm>0.10 and comm<0.12;
+------+---------+----------+------+
| SNo  | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1001 | Peel    | London   | 0.12 |
| 1003 | Axelrod | New York |  0.1 |
| 1004 | Motika  | London   | 0.11 |
+------+---------+----------+------+

17. All customers excluding those with rating <= 100 unless they are located in Rome

->mysql> select *from customer where rating > 100 or (rating <= 100 AND city = 'Rome');
+-----+----------+----------+--------+------+
| CNM | CNAME    | CITY     | RATING | SNo  |
+-----+----------+----------+--------+------+
| 202 | Giovanne | Roe      |    200 | 1003 |
| 203 | Liu      | San Jose |    300 | 1002 |
| 206 | Clemens  | London   |    300 | 1007 |
+-----+----------+----------+--------+------+


18.Write a SQL statement that displays all the information about all salespeople

-> create table salesperson:-
->mysql> create table salespeople(salesman_id int primary key,name varchar(20),city varchar(20),commission decimal(3,2));
Query OK, 0 rows affected (0.03 sec)

->mysql> describe salespeople;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| salesman_id | int          | NO   | PRI | NULL    |       |
| name        | varchar(20)  | YES  |     | NULL    |       |
| city        | varchar(20)  | YES  |     | NULL    |       |
| commission  | decimal(3,2) | YES  |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+

->mysql> insert into salespeople values(5001, 'James Hoog', 'New York', 0.15),(5002, 'Nail Knite', 'Paris', 0.13),(5005, 'Pit Alex', 'London', 0.11),(5006, 'Mc Lyon', 'Paris', 0.14),(5007, 'Paul Adam', 'Rome', 0.13),(5003, 'Lauson Hen', 'San Jose', 0.12);
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

->mysql> select * from salespeople;
+-------------+------------+----------+------------+
| salesman_id | name       | city     | commission |
+-------------+------------+----------+------------+
|        5001 | James Hoog | New York |       0.15 |
|        5002 | Nail Knite | Paris    |       0.13 |
|        5003 | Lauson Hen | San Jose |       0.12 |
|        5005 | Pit Alex   | London   |       0.11 |
|        5006 | Mc Lyon    | Paris    |       0.14 |
|        5007 | Paul Adam  | Rome     |       0.13 |
+-------------+------------+----------+------------+

Create Orders table:-
->mysql>  create table orders(order_no int primary key, purchase_amt decimal(10,2) not null, order_date date not null, customer_id int not null, salesman_id int, foreign key(salesman_id) references salespeople(salesman_id));
Query OK, 0 rows affected (0.07 sec)

mysql> describe orders;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| order_no     | int           | NO   | PRI | NULL    |       |
| purchase_amt | decimal(10,2) | NO   |     | NULL    |       |
| order_date   | date          | NO   |     | NULL    |       |
| customer_id  | int           | NO   |     | NULL    |       |
| salesman_id  | int           | YES  | MUL | NULL    |       |
+--------------+---------------+------+-----+---------+-------+

mysql> insert into orders values(70001, 150.5, '2012-10-05', 3005, 5002), (70009, 270.65, '2012-09-10', 3001, 5005),(70002, 65.26, '2012-10-05', 3002, 5001),(70004, 110.5, '2012-08-17', 3009, 5003),(70007, 948.5, '2012-09-10', 3005, 5002),(70005, 2400.6, '2012-07-27', 3007, 5001),(70008, 5760, '2012-09-10', 3002, 5001),(70010, 1983.43, '2012-10-10', 3004, 5006),(70003, 2480.4, '2012-10-10', 3009, 5003),(70012, 250.45, '2012-06-27', 3008, 5002),(70011, 75.29, '2012-08-17', 3003, 5007),(70013, 3045.6, '2012-04-25', 3002, 5001);
Query OK, 12 rows affected (0.01 sec)
Records: 12  Duplicates: 0  Warnings: 0

mysql> select * from orders;
+----------+--------------+------------+-------------+-------------+
| order_no | purchase_amt | order_date | customer_id | salesman_id |
+----------+--------------+------------+-------------+-------------+
|    70001 |       150.50 | 2012-10-05 |        3005 |        5002 |
|    70002 |        65.26 | 2012-10-05 |        3002 |        5001 |
|    70003 |      2480.40 | 2012-10-10 |        3009 |        5003 |
|    70004 |       110.50 | 2012-08-17 |        3009 |        5003 |
|    70005 |      2400.60 | 2012-07-27 |        3007 |        5001 |
|    70007 |       948.50 | 2012-09-10 |        3005 |        5002 |
|    70008 |      5760.00 | 2012-09-10 |        3002 |        5001 |
|    70009 |       270.65 | 2012-09-10 |        3001 |        5005 |
|    70010 |      1983.43 | 2012-10-10 |        3004 |        5006 |
|    70011 |        75.29 | 2012-08-17 |        3003 |        5007 |
|    70012 |       250.45 | 2012-06-27 |        3008 |        5002 |
|    70013 |      3045.60 | 2012-04-25 |        3002 |        5001 |
+----------+--------------+------------+-------------+-------------+

Create Items table:-
->mysql> create table items(product_id int primary key, product_name varchar(20) not null, product_price decimal(10,2) not null, product_mcode int not null);
Query OK, 0 rows affected (1.81 sec)

mysql> describe items;
+---------------+---------------+------+-----+---------+-------+
| Field         | Type          | Null | Key | Default | Extra |
+---------------+---------------+------+-----+---------+-------+
| product_id    | int           | NO   | PRI | NULL    |       |
| product_name  | varchar(20)   | NO   |     | NULL    |       |
| product_price | decimal(10,2) | NO   |     | NULL    |       |
| product_mcode | int           | NO   |     | NULL    |       |
+---------------+---------------+------+-----+---------+-------+

->mysql> insert into items values(101, "Mother Board", 3200.00, 15),(102, "Key Board", 450.00, 16),(103, "ZIP Drive", 250.00, 14),(104, "Speaker", 550.00, 16),(105, "Monitor", 5000.00, 11),(106, "DVD Drive", 900.00, 12),(107, "CD Drive", 800.00, 12),(108, "Printer", 2600.00, 13),(109, "Refill Cartridge", 350.00, 13),(110, "Mouse", 250.00, 12);
Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> select * from items;
+------------+------------------+---------------+---------------+
| product_id | product_name     | product_price | product_mcode |
+------------+------------------+---------------+---------------+
|        101 | Mother Board     |       3200.00 |            15 |
|        102 | Key Board        |        450.00 |            16 |
|        103 | ZIP Drive        |        250.00 |            14 |
|        104 | Speaker          |        550.00 |            16 |
|        105 | Monitor          |       5000.00 |            11 |
|        106 | DVD Drive        |        900.00 |            12 |
|        107 | CD Drive         |        800.00 |            12 |
|        108 | Printer          |       2600.00 |            13 |
|        109 | Refill Cartridge |        350.00 |            13 |
|        110 | Mouse            |        250.00 |            12 |
+------------+------------------+---------------+---------------+


19. From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.
->mysql> select order_no, order_date, purchase_amt from orders where salesman_id = 5001;
+----------+------------+--------------+
| order_no | order_date | purchase_amt |
+----------+------------+--------------+
|    70002 | 2012-10-05 |        65.26 |
|    70005 | 2012-07-27 |      2400.60 |
|    70008 | 2012-09-10 |      5760.00 |
|    70013 | 2012-04-25 |      3045.60 |
+----------+------------+--------------+

20. From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600. Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.

->mysql> select * from items where product_price between 200 and 600;
+------------+------------------+---------------+---------------+
| product_id | product_name     | product_price | product_mcode |
+------------+------------------+---------------+---------------+
|        102 | Key Board        |        450.00 |            16 |
|        103 | ZIP Drive        |        250.00 |            14 |
|        104 | Speaker          |        550.00 |            16 |
|        109 | Refill Cartridge |        350.00 |            13 |
|        110 | Mouse            |        250.00 |            12 |
+------------+------------------+---------------+---------------+

21. From the following table, write a SQL query to calculate the average price for a manufacturer code of 16. Return avg.

->mysql> select avg(product_price) as average_price from items where product_mcode = 16;
+---------------+
| average_price |
+---------------+
|    500.000000 |
+---------------+

22. From the following table, write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.'
->mysql> select product_name as 'Item Name', product_price as 'Price in Rs' from items;
+------------------+-------------+
| Item Name        | Price in Rs |
+------------------+-------------+
| Mother Board     |     3200.00 |
| Key Board        |      450.00 |
| ZIP Drive        |      250.00 |
| Speaker          |      550.00 |
| Monitor          |     5000.00 |
| DVD Drive        |      900.00 |
| CD Drive         |      800.00 |
| Printer          |     2600.00 |
| Refill Cartridge |      350.00 |
| Mouse            |      250.00 |
+------------------+-------------+

23. From the following table, write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price in descending, then product name in ascending. Return pro_name and pro_price.

->mysql> select product_name, product_price from items where product_price >= 250 order by product_price DESC, product_name ASC;
+------------------+---------------+
| product_name     | product_price |
+------------------+---------------+
| Monitor          |       5000.00 |
| Mother Board     |       3200.00 |
| Printer          |       2600.00 |
| DVD Drive        |        900.00 |
| CD Drive         |        800.00 |
| Speaker          |        550.00 |
| Key Board        |        450.00 |
| Refill Cartridge |        350.00 |
| Mouse            |        250.00 |
| ZIP Drive        |        250.00 |
+------------------+---------------+

24. From the following table, write a SQL query to calculate average price of the items for each company. Return average price and company code.

->mysql> select avg(product_price) as average_price, product_mcode as 'Product Manufacturer Code' from items group by product_mcode;
+---------------+---------------------------+
| average_price | Product Manufacturer Code |
+---------------+---------------------------+
|   3200.000000 |                        15 |
|    500.000000 |                        16 |
|    250.000000 |                        14 |
|   5000.000000 |                        11 |
|    650.000000 |                        12 |
|   1475.000000 |                        13 |
+---------------+---------------------------+
